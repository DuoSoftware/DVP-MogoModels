

var mongoose = require('mongoose');
var Schema = mongoose.Schema;


var eventSchema = new Schema({
    type: {type: String, enum : ['comment','status','notification'], default: 'comment', required: true},
    body: {}
});

var ticketSchema = new Schema({

    created_at: {type:Date,default: Date.now,require:true},
    updated_at: {type:Date,default: Date.now,require:true},
    due_at: Date,
    type: {type: String, enum : ['question','complain','incident','action'], default: 'question', required: true},
    subject: { type: String, required: true, trim: true},
    description: { type: String, required: true, trim: true},
    priority: {type: String, enum : ['urgent','high','normal','low'], default: 'normal', required: true},
    status: {type: String, enum : ['new','open','progressing','parked','solved','closed'], default: 'new', required: true},
    requester: {type: ObjectId,ref: 'ExternalUser',required: true},
    submitter: {type: ObjectId,ref: 'User'},
    assignee: {type: ObjectId,ref: 'User'},
    company: { type: Number, required: true },
    tenant: { type: Number, required: true },
    collaborators: [{type: ObjectId,ref: 'User'}],
    subtickets: [this],
    channel: {type: String, enum: ['call', 'email', 'sms', 'facebook-post', 'facebook-chat', 'twitter','skype', 'api', 'web-widget'],default: 'api', required: true},
    tags: [String],
    fields: [String],
    sla: String,
    comments: [{type: ObjectId,ref: 'Comment'}]
    events: [event]

});



var Event = mongoose.model('Event', eventSchema);
var Ticket = mongoose.model('Ticket', ticketSchema);
module.exports.Ticket = Ticket;
module.exports.Event = Event;
