

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var ObjectId = Schema.ObjectId;


var tempTicketSchema = new Schema({

        created_at: {type:Date,default: Date.now,require:true},
        updated_at: {type:Date,default: Date.now,require:true},
        active: Boolean,
        type: {type: String, enum : ['question','complain','incident','action'], default: 'question', required: true},
        subject: { type: String, required: true, trim: true},
        reference: { type: String, required: true, unique: true},
        description: { type: String, required: true, trim: true},
        priority: {type: String, enum : ['urgent','high','normal','low'], default: 'normal', required: true},
        status: {type: String, enum : ['new','open','progressing','parked','solved','closed'], default: 'new', required: true},
        submitter: {type: ObjectId,ref: 'User'},
        assignee: {type: ObjectId,ref: 'User'},
        assignee_group: [{type: ObjectId,ref: 'UserGroup'}],
        company: { type: Number, required: true },
        tenant: { type: Number, required: true },
        attachments: [{type: ObjectId,ref: 'Attachment'}],
        engagement_session: {type: String, ref: 'EngagementSession'},
        channel: {type: String, required: true},
        tags: [String],
        custom_fields: [{field:{type:String, require: true},value:{}}],
        sla: [{type: ObjectId,ref: 'SLA'}],
        comments: [{type: ObjectId,ref: 'Comment'}],
        events: [eventSchema],
        SLAViolated: Boolean

});



tempTicketSchema.index({subject:"text", description:"text"});

var TicketEvent = mongoose.model('Event', eventSchema);
var TempTicket = mongoose.model('TempTicket', tempTicketSchema);
module.exports.TempTicket = TempTicket;
module.exports.Event = TicketEvent;
